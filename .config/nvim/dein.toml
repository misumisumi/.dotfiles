[[plugins]] # Plugin Manager
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
colorscheme onedark
"$B%3%a%s%HEy$r$_$d$9$/$9$k(B
let g:onedark_color_overrides={
\ "comment_grey": { "gui": "#696969", "cterm": "41", "cterm16": "6" },
\ "special_grey": { "gui": "#696969", "cterm": "41", "cterm16": "6" },
\}
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'vimlab/split-term.vim'

[[plugins]]
repo = 'lambdalisue/suda.vim'


[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
nmap <Leader>l <Plug>(easymotion-overwin-line)

" Move to word
nmap <Leader>w <Plug>(easymotion-overwin-w)Plug>(easymotion-overwin-w)
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
let g:fern#renderer = 'nerdfont'
'''

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'

[[plugins]]
repo= 'lambdalisue/nerdfont.vim'

[[plugins]] # Fern$B$N?'JQ$((B
repo = 'lambdalisue/glyph-palette.vim'
hook_add = '''
augroup my-glyph-palette
    autocmd! *
    autocmd FileType fern call glyph_palette#apply()
    autocmd FileType nerdtree,startify call glyph_palette#apply()
augroup END
'''

[[plugins]] # Fern$B$K(Bgit status$B$rI=<((B
repo = 'lambdalisue/fern-git-status.vim'

[[plugins]] # Fern$B$r%G%U%)%k%H%U%!%$%i!<$K$9$k(B
repo = 'lambdalisue/fern-hijack.vim'

[[plugins]] # Fern$B$G%W%l%S%e!<I=<($5$;$k(B
repo = 'yuki-yano/fern-preview.vim'
hook_add = '''
function! s:fern_settings() abort
nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
nmap <silent> <buffer> <C-p> <Plug>(fern-action-preview:auto:toggle)
nmap <silent> <buffer> <C-d> <Plug>(fern-action-preview:scroll:down:half)
nmap <silent> <buffer> <C-u> <Plug>(fern-action-preview:scroll:up:half)
endfunction

augroup fern-settings
autocmd!
autocmd FileType fern call s:fern_settings()
augroup END
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
" Preview window on the upper side of the window with 40% height,
" hidden by default, ctrl-/ to toggle
let g:fzf_preview_window = ['up:40%', 'ctrl-/']
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline_theme = 'deus'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1 
let g:airline#extensions#whitespace#enabled = 0
let g:airline_section_c = '%t %M'
let g:airline_section_z = get(g:, 'airline_linecolumn_prefix', '').'%3l:%-2v'
" Â§âÊõ¥„Åå„Å™„Åë„Çå„Å∞diff„ÅÆË°åÊï∞„ÇíË°®Á§∫„Åó„Å™„ÅÑ
let g:airline#extensions#hunks#non_zero_only = 1 
let g:airline#extensions#default#layout = [
    \ [ 'a', 'b', 'c'],
    \ [ 'y', 'z' ],
    \] 
'''
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
rev = 'release'
# hook_add = """
#     source /home/sumi/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim
# 
#     " Some servers have issues with backup files, see #649.
#     set nobackup
#     set nowritebackup
# 
#     " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
#     " delays and poor user experience.
#   set updatetime=300
# 
#   " Don't pass messages to |ins-completion-menu|.
#   set shortmess+=c
# 
#   " Always show the signcolumn, otherwise it would shift the text each time
#   " diagnostics appear/become resolved.
#   if has("patch-8.1.1564")
#     " Recently vim can merge signcolumn and number column into one
#     set signcolumn=number
#   else
#     set signcolumn=yes
#   endif
# 
#     " Use tab for trigger completion with characters ahead and navigate.
#     " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
#     " other plugin before putting this into your config.
#     inoremap <silent><expr> <TAB>
#           \ pumvisible() ? "\<C-n>" :
#           \ <SID>check_back_space() ? "\<TAB>" :
#           \ coc#refresh()
#     inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
# 
#     function! s:check_back_space() abort
#       let col = col('.') - 1
#       return !col || getline('.')[col - 1]  =~# '\s'
#     endfunction
# 
#     " Use <c-space> to trigger completion.
#     if has('nvim')
#       inoremap <silent><expr> <c-space> coc#refresh()
#     else
#       inoremap <silent><expr> <c-@> coc#refresh()
#     endif
# 
#     " Make <CR> auto-select the first completion item and notify coc.nvim to
#     " format on enter, <cr> could be remapped by other vim plugin
#     inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
#                                   \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
# 
#     " Use `[g` and `]g` to navigate diagnostics
#     " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
#     nmap <silent> [g <Plug>(coc-diagnostic-prev)
#     nmap <silent> ]g <Plug>(coc-diagnostic-next)
# 
#     " GoTo code navigation.
#     nmap <silent> gd <Plug>(coc-definition)
#     nmap <silent> gy <Plug>(coc-type-definition)
#     nmap <silent> gi <Plug>(coc-implementation)
#     nmap <silent> gr <Plug>(coc-references)
# 
#     " Use K to show documentation in preview window.
#     nnoremap <silent> K :call <SID>show_documentation()<CR>
# 
#     function! s:show_documentation()
#       if (index(['vim','help'], &filetype) >= 0)
#         execute 'h '.expand('<cword>')
#       elseif (coc#rpc#ready())
#         call CocActionAsync('doHover')
#       else
#         execute '!' . &keywordprg . " " . expand('<cword>')
#       endif
#     endfunction
# 
#     " Highlight the symbol and its references when holding the cursor.
#     autocmd CursorHold * silent call CocActionAsync('highlight')
# 
#     " Symbol renaming.
#     nmap <leader>rn <Plug>(coc-rename)
# 
#     " Formatting selected code.
#     xmap <leader>f  <Plug>(coc-format-selected)
#     nmap <leader>f  <Plug>(coc-format-selected)
# 
#     augroup mygroup
#       autocmd!
#       " Setup formatexpr specified filetype(s).
#       autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
#       " Update signature help on jump placeholder.
#       autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
#     augroup end
# 
#     " Applying codeAction to the selected region.
#     " Example: `<leader>aap` for current paragraph
#     xmap <leader>a  <Plug>(coc-codeaction-selected)
#     nmap <leader>a  <Plug>(coc-codeaction-selected)
# 
#     " Remap keys for applying codeAction to the current buffer.
#     nmap <leader>ac  <Plug>(coc-codeaction)
#     " Apply AutoFix to problem on the current line.
#     nmap <leader>qf  <Plug>(coc-fix-current)
# 
#     " Map function and class text objects
#     " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
#     xmap if <Plug>(coc-funcobj-i)
#     omap if <Plug>(coc-funcobj-i)
#     xmap af <Plug>(coc-funcobj-a)
#     omap af <Plug>(coc-funcobj-a)
#     xmap ic <Plug>(coc-classobj-i)
#     omap ic <Plug>(coc-classobj-i)
#     xmap ac <Plug>(coc-classobj-a)
#     omap ac <Plug>(coc-classobj-a)
# 
#     " Remap <C-f> and <C-b> for scroll float windows/popups.
#     " Note coc#float#scroll works on neovim >= 0.4.0 or vim >= 8.2.0750
#     nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
#     nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
#     inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
#     inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
# 
#     " NeoVim-only mapping for visual mode scroll
#     " Useful on signatureHelp after jump placeholder of snippet expansion
#     if has('nvim')
#       vnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#nvim_scroll(1, 1) : "\<C-f>"
#       vnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#nvim_scroll(0, 1) : "\<C-b>"
#     endif
# 
#     " Use CTRL-S for selections ranges.
#     " Requires 'textDocument/selectionRange' support of language server.
#     nmap <silent> <C-s> <Plug>(coc-range-select)
#     xmap <silent> <C-s> <Plug>(coc-range-select)
# 
#     " Add `:Format` command to format current buffer.
#     command! -nargs=0 Format :call CocAction('format')
# 
#     " Add `:Fold` command to fold current buffer.
#     command! -nargs=? Fold :call     CocAction('fold', <f-args>)
# 
#     " Add `:OR` command for organize imports of the current buffer.
#     command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
# 
#     " Add (Neo)Vim's native statusline support.
#     " NOTE: Please see `:h coc-status` for integrations with external plugins that
#     " provide custom statusline: lightline.vim, vim-airline.
#     set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
# 
#     " Mappings for CoCList
#     " Show all diagnostics.
#     nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
#     " Manage extensions.
#     nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
#     " Show commands.
#     nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
#     " Find symbol of current document.
#     nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
#     " Search workspace symbols.
#     nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
#     " Do default action for next item.
#     nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
#     " Do default action for previous item.
#     nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
#     " Resume latest coc list.
#     nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
# """
